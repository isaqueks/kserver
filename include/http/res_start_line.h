#ifndef RES_START_LINE
#define RES_START_LINE 1

#include <inttypes.h>
#include "../constants/constants.h"

typedef struct {

    char version[MAX_HTTP_VERSION_SIZE];
    uint32_t status_code;
    char status_message[MAX_HTTP_STATUS_MESSAGE_SIZE];

} http_response_start_line_t;

/**
 * @brief Allocates a new http_response_start_line_t object in the heap memory and initializes it.
 * 
 * @return http_response_start_line_t* 
 */
http_response_start_line_t* http_res_start_line_create();

/**
 * @brief Initializes the start line object.
 * 
 * @param start_line 
 */
void http_res_start_line_init(http_response_start_line_t* start_line);

/**
 * @brief Set the start line version
 * 
 * @param start_line The start line to set the version to
 * @param version The version to set
 * @return int The number of bytes written or < 0 if there was an error
 */
int http_res_start_line_set_version(http_response_start_line_t* start_line, char* version);

/**
 * @brief Set the start line status code
 * 
 * @param start_line The start line to set the version to
 * @param status_code The version to set
 * @return int 0 if ok and < 0 if there was an error
 */
int http_res_start_line_set_status_code(http_response_start_line_t* start_line, uint32_t status_code);

/**
 * @brief Set the start line status message
 * 
 * @param start_line 
 * @param status_message 
 * @return int The number of bytes written or < 0 if there was an error
 */
int http_res_start_line_set_status_message(http_response_start_line_t* start_line, char* status_message);

/**
 * @brief Outputs the start line to a buffer.
 * 
 * @param start_line 
 * @param buffer 
 * @param buffer_size 
 * @return int The number of bytes written or < 0 if there was an error
 */
int http_res_start_line_output(http_response_start_line_t* start_line, char* buffer, int buffer_size);

/*
    At the moment, no need to add a parse method cuz as it's the response start line
    it will be generated by the server and not parsed by it.

*/

#endif